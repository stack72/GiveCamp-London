@model GiveCampLondon.Website.Models.Volunteer.SignUpViewModel
@{
    ViewBag.Title = "Volunteer Sign-up";
}
<h1>
    Volunteer Sign-Up</h1>
<br />
@using (Html.BeginForm())
{

    @Html.ValidationSummary()
    <fieldset>
        <div class="editor-label">
            @Html.LabelFor(model => model.UserName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.UserName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Password)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Password)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ConfirmPassword)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ConfirmPassword)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.FirstName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FirstName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.LastName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LastName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TeamName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TeamName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Email)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Email)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.PhoneNumber)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PhoneNumber)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ShirtSize)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.ShirtSize, new SelectList(GiveCampLondon.ShirtSizeValues.ShirtSizes))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ShirtStyle)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.ShirtStyle, new SelectList(GiveCampLondon.ShirtStyleValues.ShirtStyles))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.JobRoleIds)
        </div>
        <div class="editor-field">
            @Html.Raw(Html.CheckBoxList("jobRoles", ViewBag.JobRoles as List<SelectListItem>))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.IsGoodGuiDesigner)
        </div>
        <div class="editor-field">
            @Html.RadioButtonFor(model => model.IsGoodGuiDesigner, "true") Yes
            @Html.RadioButtonFor(model => model.IsGoodGuiDesigner, "false") No
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.IsStudent)
        </div>
        <div class="editor-field">
            @Html.RadioButtonFor(model => model.IsStudent, "true") Yes
            @Html.RadioButtonFor(model => model.IsStudent, "false") No
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.JobDescription)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.JobDescription)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TechnologyIds)
        </div>
        <div class="editor-field">
            @Html.Raw(Html.CheckBoxList("technologies", ViewBag.Technologies as List<SelectListItem>))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ExperienceLevel)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.ExperienceLevel, ViewBag.ExperienceLevels as List<SelectListItem>)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.YearsOfExperience)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.YearsOfExperience)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.DietaryNeeds)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DietaryNeeds)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TwitterHandle)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TwitterHandle)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.HasLaptop)
        </div>
        <div class="editor-field">
            @Html.RadioButtonFor(model => model.HasLaptop, "true") Yes
            @Html.RadioButtonFor(model => model.HasLaptop, "false") No
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.HasExtraLaptop)
        </div>
        <div class="editor-field">
            @Html.RadioButtonFor(model => model.HasExtraLaptop, "true") Yes
            @Html.RadioButtonFor(model => model.HasExtraLaptop, "false") No
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Bio)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Bio)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Comments)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Comments)
        </div>
    </fieldset>

    <input type="submit" value="Sign Up" />
}